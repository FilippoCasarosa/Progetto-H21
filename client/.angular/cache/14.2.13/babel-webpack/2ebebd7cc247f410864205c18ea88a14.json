{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { Observable, of, Subject } from \"rxjs\";\nimport { map, catchError, tap, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"src/app/shared/services/list.service\";\nimport * as i4 from \"./image.service\";\n/**\r\n * @author Filippo Casarosa\r\n * @author Andrei Blindu\r\n */\n\nexport let PrebuiltService = /*#__PURE__*/(() => {\n  class PrebuiltService {\n    constructor(http, messageService, listService, imageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.listService = listService;\n      this.imageService = imageService;\n      this.prebuiltsChanged = new Subject();\n      this.error = new Subject();\n      this.prebuiltsUrl = 'http://localhost:8080/readySetups';\n      this.prebuiltUrl = 'http://localhost:8080/readySetup';\n    }\n    /** GET prebuilts from the server */\n\n\n    getPrebuilts() {\n      return this.http.get(this.prebuiltsUrl).pipe(tap(_ => this.log('fetched prebuilts')), catchError(this.handleError('getPrebuilts', [])));\n    }\n    /** GET prebuilt by id. Will 404 if id not found */\n\n\n    getPrebuilt(id) {\n      const url = `${this.prebuiltsUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched prebuilt id=${id}`)), catchError(this.handleError(`getPrebuilt id=${id}`)));\n    }\n    /** POST: add a new prebuilt to the server  */\n\n\n    addPrebuilt(prebuilt) {\n      console.log(JSON.stringify(prebuilt));\n      return this.http.post(this.prebuiltUrl, prebuilt).pipe(tap(newPrebuilt => this.log(`added prebuilt w/ id=${newPrebuilt.id}`)), catchError(this.handleError('addPrebuilt')));\n    }\n    /** DELETE: delete the prebuilt from the server */\n\n\n    deletePrebuilt(id) {\n      const url = `${this.prebuiltUrl}/${id}`;\n      return this.http.delete(url).pipe(tap(_ => this.log(`deleted prebuilt id=${id}`)), catchError(this.handleError('deletePrebuilt')));\n    }\n    /** PUT: update the prebuilt on the server */\n\n\n    updatePrebuilt(prebuilt, id) {\n      console.log(JSON.stringify(prebuilt));\n      const url = `${this.prebuiltUrl}/${id}`;\n      return this.http.put(url, prebuilt).pipe(tap(_ => this.log(`updated prebuilt id=${prebuilt.id}`)), catchError(this.handleError('updatePrebuilt')));\n    }\n\n    save(prebuilt, image) {\n      return this.imageService.addImage(image).pipe(map(fileDownloadUri => {\n        return Object.assign(Object.assign({}, prebuilt), {\n          imagePath: fileDownloadUri,\n          componentList: this.listService.getList().map(pcComponent => {\n            return pcComponent.id;\n          })\n        });\n      }), switchMap(prebuilt => this.addPrebuilt(prebuilt)), tap(prebuiltSaved => {\n        this.log(`saved prebuilt id=${prebuiltSaved.id}`);\n      }));\n    }\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a PrebuiltService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`PrebuiltService: ${message}`);\n    }\n\n  }\n\n  PrebuiltService.ɵfac = function PrebuiltService_Factory(t) {\n    return new (t || PrebuiltService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.ListService), i0.ɵɵinject(i4.ImageService));\n  };\n\n  PrebuiltService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PrebuiltService,\n    factory: PrebuiltService.ɵfac,\n    providedIn: 'root'\n  });\n  return PrebuiltService;\n})();","map":null,"metadata":{},"sourceType":"module"}
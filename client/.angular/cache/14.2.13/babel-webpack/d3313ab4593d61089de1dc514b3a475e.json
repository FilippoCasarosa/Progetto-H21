{"ast":null,"code":"import { BehaviorSubject, throwError } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { Admin } from \"./admin.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../shared/services/message.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, messageService) {\n      this.http = http;\n      this.router = router;\n      this.messageService = messageService;\n      this.admin = new BehaviorSubject(null);\n    }\n\n    login(name, password) {\n      return this.http.post('http://localhost:8080/login', {\n        name: name,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthentication(resData.id, resData.credential, resData.token, resData.expireDate);\n      }), tap(data => console.log('token: ' + data.token)));\n    }\n\n    autoLogin() {\n      const adminData = JSON.parse(localStorage.getItem('adminData'));\n      console.log(adminData);\n\n      if (!adminData) {\n        return;\n      }\n\n      const loadedAdmin = new Admin(adminData.id, adminData.name, adminData._token, new Date(adminData._tokenExpireDate));\n      console.log(loadedAdmin);\n\n      if (loadedAdmin.token) {\n        this.admin.next(loadedAdmin);\n        const expirationDuration = new Date(adminData._tokenExpireDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n    }\n\n    logout() {\n      const url = `http://localhost:8080/logout`;\n      return this.http.get(url).subscribe(_ => {\n        this.admin.next(null);\n        this.router.navigate(['/auth']);\n        localStorage.removeItem('adminData');\n\n        if (this.tokenExpirationTimer) {\n          clearTimeout(this.tokenExpirationTimer);\n        }\n\n        this.tokenExpirationTimer = null;\n      });\n    }\n\n    autoLogout(expirationDuration) {\n      console.log(expirationDuration);\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDuration);\n    }\n\n    handleAuthentication(id, credential, token, expireDate) {\n      const admin = new Admin(id, credential.name, token, expireDate);\n      this.admin.next(admin);\n      const expirationDuration = new Date(expireDate).getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration);\n      localStorage.setItem('adminData', JSON.stringify(admin));\n    }\n\n    handleError(errorRes) {\n      let errorMessage = 'ACCESSO NEGATO';\n\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMessage);\n      }\n\n      switch (errorRes.error.error.message) {\n        case 'NOT_FOUND':\n          errorMessage = 'This email does not exist';\n          break;\n\n        case 'UNAUTHORIZED':\n          errorMessage = 'This password is not correct';\n          break;\n      }\n\n      ;\n      return throwError(errorMessage);\n    }\n\n    log(message) {\n      this.messageService.add(`Auth: ${message}`);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MessageService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}
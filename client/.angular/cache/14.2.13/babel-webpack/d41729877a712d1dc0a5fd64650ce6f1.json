{"ast":null,"code":"import { of, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./component-type.service\";\nimport * as i2 from \"./compatibility.service\";\nimport * as i3 from \"./pc-components.service\";\n/**\r\n * @author Filippo Casarosa\r\n * @author Andrei Blindu\r\n */\n\nexport let ListService = /*#__PURE__*/(() => {\n  class ListService {\n    constructor(componentTypeService, compatibilityService, pcComponentsService) {\n      this.componentTypeService = componentTypeService;\n      this.compatibilityService = compatibilityService;\n      this.pcComponentsService = pcComponentsService;\n      this.setupState$ = new Subject();\n      this.initState$ = new Subject();\n      this.initState$.next(false);\n      this.initSetup();\n      this.componentTypeList = [];\n      this.current = 0;\n      this.totalPrice = 0;\n      this.totalPower = 0;\n      this.powerSupplied = 0;\n    }\n\n    getCurrent() {\n      return this.current;\n    }\n\n    getList() {\n      return this.list;\n    }\n\n    getTotalPrice() {\n      return this.totalPrice;\n    }\n\n    getTotalPower() {\n      return this.totalPower;\n    }\n\n    getPowerSupplied() {\n      return this.powerSupplied;\n    }\n\n    calculateTotalPrice() {\n      this.totalPrice += this.list[this.list.length - 1].price;\n    }\n\n    calculateTotalPower() {\n      if (this.list[this.list.length - 1].componentFamily.type.sortOrder === this.componentTypeList.length) {\n        this.powerSupplied = this.list[this.list.length - 1].power;\n      } else {\n        this.totalPower += this.list[this.list.length - 1].power;\n      }\n    }\n\n    checkPowerSupplied() {\n      const powerSurplus = 1.2;\n      return this.powerSupplied < this.totalPower * powerSurplus;\n    }\n\n    fetchComponentTypes() {\n      return of(this.componentTypeList);\n    }\n\n    initSetup() {\n      this.list = [];\n      this.setupState$.next(true);\n      this.componentTypeService.getComponentType().subscribe(data => {\n        this.componentTypeList = data;\n        this.initState$.next(true);\n      });\n    }\n\n    addComponent(component) {\n      this.list.push(component);\n      this.calculateTotalPrice();\n      this.calculateTotalPower();\n\n      if (this.list.length === this.componentTypeList.length) {\n        this.setupState$.next(false);\n      }\n\n      this.current = this.list.length;\n      console.log('list.length:' + this.list.length);\n    }\n\n    getComponents(typeId) {\n      if (this.list.length === 0) {\n        return this.fetchPcComponents(typeId);\n      } else {\n        return this.fetchCompatiblePcComponents();\n      }\n    }\n\n    fetchPcComponents(typeId) {\n      return this.pcComponentsService.getPcComponentsByType(typeId).pipe(tap(() => console.log()));\n    }\n\n    fetchCompatiblePcComponents() {\n      return this.compatibilityService.getComponentsByCompatibility(this.list[this.list.length - 1].id).pipe(tap(() => console.log()));\n    }\n\n    deleteLastComponent() {\n      this.list.splice(this.list.length - 1);\n\n      if (this.list.length === this.componentTypeList.length) {\n        this.setupState$.next(false);\n      }\n\n      this.current = this.list.length;\n    }\n    /**\r\n     * Selects a random component from the array.\r\n     * Uses Math.random() which is sufficient for non-cryptographic purposes like component selection.\r\n     * @param components Array of components to choose from\r\n     * @returns A randomly selected component\r\n     */\n\n\n    selectRandomComponent(components) {\n      // Math.random() is safe here: we're selecting PC components, not generating security tokens\n      const randomIndex = Math.floor(Math.random() * components.length);\n      return components[randomIndex];\n    }\n\n    autoConfig(typeId) {\n      this.getComponents(typeId).subscribe(res => {\n        const filteredPcComponents = res;\n        const choosenComponent = this.selectRandomComponent(filteredPcComponents);\n        this.addComponent(choosenComponent);\n        console.log(this.getList());\n\n        if (this.list.length !== this.componentTypeList.length) {\n          this.autoConfig(choosenComponent.componentFamily.type.id);\n        }\n      });\n    }\n\n  }\n\n  ListService.ɵfac = function ListService_Factory(t) {\n    return new (t || ListService)(i0.ɵɵinject(i1.ComponentTypeService), i0.ɵɵinject(i2.CompatibilityService), i0.ɵɵinject(i3.PcComponentsService));\n  };\n\n  ListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ListService,\n    factory: ListService.ɵfac,\n    providedIn: 'root'\n  });\n  return ListService;\n})();","map":null,"metadata":{},"sourceType":"module"}
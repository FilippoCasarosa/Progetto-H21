{"ast":null,"code":"import { Observable, of, Subject } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\n/**\r\n * @author Filippo Casarosa\r\n * @author Andrei Blindu\r\n */\n\nexport let ComponentTypeService = /*#__PURE__*/(() => {\n  class ComponentTypeService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.componentTypesChanged = new Subject();\n      this.error = new Subject();\n      this.componentTypesUrl = 'http://localhost:8080/componentTypes';\n    }\n    /** GET prebuilts from the server */\n\n\n    getComponentType() {\n      return this.http.get(this.componentTypesUrl).pipe(tap(_ => this.log('fetched componentType')), catchError(this.handleError('getComponentType', [])));\n    }\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a PrebuiltService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`PcComponentsService: ${message}`);\n    }\n\n  }\n\n  ComponentTypeService.ɵfac = function ComponentTypeService_Factory(t) {\n    return new (t || ComponentTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  ComponentTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ComponentTypeService,\n    factory: ComponentTypeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ComponentTypeService;\n})();","map":null,"metadata":{},"sourceType":"module"}
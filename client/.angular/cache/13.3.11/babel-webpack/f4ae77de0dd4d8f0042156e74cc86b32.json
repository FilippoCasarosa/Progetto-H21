{"ast":null,"code":"import { of, Subject } from \"rxjs\";\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\n/**\r\n * @author Filippo Casarosa\r\n * @author Andrei Blindu\r\n */\n\nexport let ImageService = /*#__PURE__*/(() => {\n  class ImageService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.imagesChanged = new Subject();\n      this.error = new Subject();\n      this.uploadUrl = 'http://localhost:8080/uploadFile';\n      this.downloadUrl = 'http://localhost:8080/downloadFile';\n    }\n\n    addImage(image) {\n      let formData = new FormData();\n      formData.append('file', image);\n      return this.http.post(this.uploadUrl, formData).pipe(tap(uploadFileResponse => this.log(`added image w/ url Name=${uploadFileResponse.fileDownloadUri}`)), map(uploadFileResponse => uploadFileResponse.fileDownloadUri), catchError(this.handleError('addImage')));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a PrebuiltService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`PrebuiltService: ${message}`);\n    }\n\n  }\n\n  ImageService.ɵfac = function ImageService_Factory(t) {\n    return new (t || ImageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  ImageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImageService,\n    factory: ImageService.ɵfac,\n    providedIn: 'root'\n  });\n  return ImageService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { of, Subject } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\n/**\r\n * @author Filippo Casarosa\r\n * @author Andrei Blindu\r\n */\n\nexport let CompatibilityService = /*#__PURE__*/(() => {\n  class CompatibilityService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.CompatibilyChanged = new Subject();\n      this.pcComponentsChanged = new Subject();\n      this.error = new Subject();\n      this.CompatibilityUrl = 'http://localhost:8080/compatibilityConstraints';\n      this.CompatibilitUrl = 'http://localhost:8080/compatibilityConstraint';\n    }\n    /** GET all the components that are compatible with a given component*/\n\n\n    getComponentsByCompatibility(id) {\n      const url = `http://localhost:8080/compatibilityConstraints/getByComponentId/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log('fetched Components by Compatibility')), catchError(this.handleError('getComponentsByCompatibility', [])));\n    }\n    /** GET prebuilts from the server */\n\n\n    getCompatibilies() {\n      return this.http.get(this.CompatibilityUrl).pipe(tap(_ => this.log('fetched Compatibilities')), catchError(this.handleError('getCompatibilies', [])));\n    }\n    /** GET Compatibility by id. Will 404 if id not found */\n\n\n    getCompatibility(id) {\n      const url = `${this.CompatibilityUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched Compatibility id=${id}`)), catchError(this.handleError(`getCompatibility id=${id}`)));\n    }\n    /** POST: add a new prebuilt to the server  */\n\n\n    addCompatibility(family) {\n      return this.http.post(this.CompatibilitUrl, family).pipe(tap(newCompatibility => this.log(`added Compatibility w/ id=${newCompatibility.id}`)), catchError(this.handleError('addCompatibility')));\n    }\n    /** DELETE: delete the prebuilt from the server */\n\n\n    deleteCompatibility(id) {\n      const url = `${this.CompatibilitUrl}/${id}`;\n      return this.http.delete(url).pipe(tap(_ => this.log(`deleted Compatibility id=${id}`)), catchError(this.handleError('deleteCompatibility')));\n    }\n    /** PUT: update the prebuilt on the server */\n\n\n    updateCompatibility(compatibility, id) {\n      const url = `${this.CompatibilitUrl}/${id}`;\n      return this.http.put(this.CompatibilitUrl, compatibility).pipe(tap(_ => this.log(`updated Compatibility id=${compatibility.id}`)), catchError(this.handleError('updateCompatibility')));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a PrebuiltService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`CompatibilityService: ${message}`);\n    }\n\n  }\n\n  CompatibilityService.ɵfac = function CompatibilityService_Factory(t) {\n    return new (t || CompatibilityService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  CompatibilityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CompatibilityService,\n    factory: CompatibilityService.ɵfac,\n    providedIn: 'root'\n  });\n  return CompatibilityService;\n})();","map":null,"metadata":{},"sourceType":"module"}
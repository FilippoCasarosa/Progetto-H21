{"ast":null,"code":"import { of, Subject } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/shared/services/message.service\";\n/**\r\n * @author Filippo Casarosa\r\n * @author Andrei Blindu\r\n */\n\nexport let FamilyService = /*#__PURE__*/(() => {\n  class FamilyService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.familyChanged = new Subject();\n      this.error = new Subject();\n      this.familiesUrl = 'http://localhost:8080/componentFamilies';\n      this.familyUrl = 'http://localhost:8080/componentFamily';\n    }\n    /** GET prebuilts from the server */\n\n\n    getFamilies() {\n      return this.http.get(this.familiesUrl).pipe(tap(_ => this.log('fetched family')), catchError(this.handleError('getFamilies', [])));\n    }\n    /** GET component by id. Will 404 if id not found */\n\n\n    getFamily(id) {\n      const url = `${this.familiesUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched Family id=${id}`)), catchError(this.handleError(`getFamily id=${id}`)));\n    }\n    /** POST: add a new prebuilt to the server  */\n\n\n    addFamily(family) {\n      return this.http.post(this.familyUrl, family).pipe(tap(newFamily => this.log(`added family w/ id=${newFamily.id}`)), catchError(this.handleError('addFamily')));\n    }\n    /** DELETE: delete the prebuilt from the server */\n\n\n    deleteFamily(id) {\n      const url = `${this.familyUrl}/${id}`;\n      return this.http.delete(url).pipe(tap(_ => this.log(`deleted family id=${id}`)), catchError(this.handleError('deleteFamily')));\n    }\n    /** PUT: update the prebuilt on the server */\n\n\n    updateFamily(family, id) {\n      const url = `${this.familyUrl}/${id}`;\n      return this.http.put(url, family).pipe(tap(_ => this.log(`updated family id=${family.id}`)), catchError(this.handleError('updateFamily')));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a PrebuiltService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`PrebuiltService: ${message}`);\n    }\n\n  }\n\n  FamilyService.ɵfac = function FamilyService_Factory(t) {\n    return new (t || FamilyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  FamilyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FamilyService,\n    factory: FamilyService.ɵfac,\n    providedIn: 'root'\n  });\n  return FamilyService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { of, Subject } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\n/**\r\n * @author Filippo Casarosa\r\n * @author Andrei Blindu\r\n */\n\nexport let PcComponentsService = /*#__PURE__*/(() => {\n  class PcComponentsService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.pcComponentsChanged = new Subject();\n      this.error = new Subject();\n      this.pcComponentsUrl = 'http://localhost:8080/components';\n      this.pcComponentUrl = 'http://localhost:8080/component';\n    }\n    /** GET prebuilts from the server */\n\n\n    getPcComponents() {\n      return this.http.get(this.pcComponentsUrl).pipe(tap(_ => this.log('fetched pcComponents')), catchError(this.handleError('getPcComponents', [])));\n    }\n    /** GET component by id. Will 404 if id not found */\n\n\n    getPcComponent(id) {\n      const url = `${this.pcComponentsUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched PcComponent id=${id}`)), catchError(this.handleError(`getPcComponent id=${id}`)));\n    }\n    /** GET components by type. Will 404 if id not found */\n\n\n    getPcComponentsByType(componentTypeId) {\n      const url = `${this.pcComponentUrl}/${componentTypeId}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched PcComponents by type`)), catchError(this.handleError(`getPcComponentsByType}`)));\n    }\n    /** POST: add a new component to the server  */\n\n\n    addPcComponent(pcComponent) {\n      return this.http.post(this.pcComponentUrl, pcComponent).pipe(tap(newPcComponent => this.log(`added PcComponent w/ id=${newPcComponent.id}`)), catchError(this.handleError('addPcComponent')));\n    }\n    /** DELETE: delete the component from the server */\n\n\n    deletePcComponent(id) {\n      const url = `${this.pcComponentUrl}/${id}`;\n      return this.http.delete(url).pipe(tap(_ => this.log(`deleted pcComponent id=${id}`)), catchError(this.handleError('deletePcComponent')));\n    }\n    /** PUT: update the component on the server */\n\n\n    updatePcComponent(pcComponent, id) {\n      const url = `${this.pcComponentUrl}/${id}`;\n      return this.http.put(url, pcComponent).pipe(tap(_ => this.log(`updated pcComponent id=${pcComponent.id}`)), catchError(this.handleError('updatePcComponent')));\n    }\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a PrebuiltService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`PcComponentsService: ${message}`);\n    }\n\n  }\n\n  PcComponentsService.ɵfac = function PcComponentsService_Factory(t) {\n    return new (t || PcComponentsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  PcComponentsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PcComponentsService,\n    factory: PcComponentsService.ɵfac,\n    providedIn: 'root'\n  });\n  return PcComponentsService;\n})();","map":null,"metadata":{},"sourceType":"module"}